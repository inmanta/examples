"""
    :copyright: 2024 Inmanta
    :contact: code@inmanta.com
    :license: Inmanta EULA

    This module defines the ImportantCustomerService service and the logic
    required to manage it.
"""
import fs
import lsm
import integration_example
import config


localhost = std::Host(
    name="localhost",
    os=std::linux,
    via=Local(),
)

std::AgentConfig(
    autostart=true,
    agentname=localhost.name,
)

orders_folder = fs::Directory(
    host=localhost,
    path=config::resolve_path(config::get_config_value_as_string(integration_example::conf, "important_customer_service.orders_folder")),
    mode=755,
    owner="inmanta",
    group="inmanta",
)

items_folder = fs::Directory(
    host=localhost,
    path=config::resolve_path(config::get_config_value_as_string(integration_example::conf, "important_customer_service.items_folder")),
    mode=755,
    owner="inmanta",
    group="inmanta",
)


typedef item_priority_t as string matching self in ["CRITICAL", "HIGH", "NORMAL", "LOW"]
"""
Definition of the priority that a service item can have.
"""


entity ImportantCustomerService extends lsm::ServiceEntity:
    """
    This service allows to serve the given customer with the important service
    we offer.

    :attr order_id: A unique identifier for this service, the form is completely free and
        is left to the service user.
    :attr service_id: Read-only, a unique identifier for this service, provided by the api.
    """
    std::ascii_word order_id
    lsm::attribute_modifier order_id__modifier = "rw"

    int? service_id = null
    lsm::attribute_modifier service_id__modifier = "r"
end
ImportantCustomerService.documentation [1] lsm::__rwplus__ ServiceDocumentation._service [1]
"""
Human-readable documentation about this service instance.
"""

ImportantCustomerService.items [0:] lsm::__rwplus__ ServiceItem._service [1]
"""
A list of items which compose the service, items can be added and removed from the
list.
"""

index ImportantCustomerService(order_id)
"""
The natural identifier for a service is the user-provided order_id
"""


entity ServiceDocumentation extends lsm::EmbeddedEntity:
    """
    Some documentation about the service that is being deployed.  Such as the
    customer it serves or a custom description of this particular instance of
    the service.

    :attr customer_reference: A reference to the customer that this service serves.
    :attr description: More context information about the service.
    :attr customer_info: Read-only, customer information that we resolved thanks to
        the provided customer reference.
    """
    string customer_reference
    lsm::attribute_modifier customer_reference__modifier = "rw"

    string? description = null
    lsm::attribute_modifier description__modifier = "rw+"

    dict? customer_info = null
    lsm::attribute_modifier customer_info__modifier = "r"
end


entity ServiceItem extends lsm::EmbeddedEntity, lsm::ServiceBase:
    """
    A specific item in the service that is being offered to the customer.

    :attr name: The name of the item, this should be unique by service.
    :attr priority: The priority of the item.
    :attr description: A free-form description of this item.
    :attr service_item_id: Read-only, a unique identifier of this item across
        all services in the inventory, provided by the api.
    :attr _purged: Internat attribute to mark an item as deleted (for updates
        where the item is removed from the list in the inventory).
    """
    std::ascii_word name
    lsm::attribute_modifier name__modifier = "rw"

    item_priority_t priority = "NORMAL"
    lsm::attribute_modifier priority__modifier = "rw+"

    string? description = null
    lsm::attribute_modifier description__modifier = "rw+"

    int? service_item_id = null
    lsm::attribute_modifier service_item_id__modifier = "r"

    bool _purged
end

index ServiceItem(_service, name)
"""
The natural identifier of an item within a service is its name.
"""


ImportantCustomerService._order_folder [1] -- fs::Directory
ImportantCustomerService._items_folder [0:1] -- fs::Directory


implementation service_file for ImportantCustomerService:
    """
    For each service, deploy a file on localhost that contains the service
    information.
    """
    # Create a folder for our service, in which will lay all of the service
    # files.
    self._order_folder = fs::Directory(
        host=localhost,
        path=f"{orders_folder.path}/order-{self.service_id}",
        mode=755,
        owner="inmanta",
        group="inmanta",
        purged=self.purge_resources,
        send_event=true,
        requires=[self.requires, orders_folder],
        provides=self.provides,
    )
    self.resources += self._order_folder

    if not self._order_folder.purged:
        # Create a folder for our service items
        self._items_folder = fs::Directory(
            host=localhost,
            path=f"{self._order_folder.path}/items",
            mode=755,
            owner="inmanta",
            group="inmanta",
            send_event=true,
            requires=[self.requires, self._order_folder],
            provides=self.provides,
        )
        self.resources += self._items_folder

        # Create a file that contains the information about our service
        self.resources += fs::File(
            host=localhost,
            path=f"{self._order_folder.path}/{self.order_id}.json",
            content=json_dumps(
                {
                    "order_id": self.order_id,
                    "service_id": self.service_id,
                    "documentation": {
                        "customer_reference": self.documentation.customer_reference,
                        "description": self.documentation.description,
                        "customer_info": self.documentation.customer_info,
                    },
                    "itemsCount": std::len([i for i in self.items if not i._purged]),
                },
            ),
            mode=644,
            owner="inmanta",
            group="inmanta",
            send_event=true,
            requires=[self.requires, self._order_folder],
            provides=self.provides,
        )
    end

    # All of this service's resources are owned by this service
    self.owned_resources += self.resources
end


implementation item_file for ServiceItem:
    """
    For each item, deploy a file on localhost that contain the item information.
    """
    self.purge_resources = self._service.purge_resources
    self._service.resources += self.resources

    # Create a file for the item of this service, in the global items folder
    item_file = fs::File(
        host=localhost,
        path=f"{items_folder.path}/item-{self.service_item_id}.json",
        content=json_dumps(
            {
                "name": self.name,
                "priority": self.priority,
                "description": self.description,
                "service_item_id": self.service_item_id,
            },
        ),
        mode=644,
        owner="inmanta",
        group="inmanta",
        purged=self._purged,
        send_event=true,
        requires=[self.requires, items_folder],
        provides=self.provides,
    )
    self.resources += item_file

    if not self._service._order_folder.purged:
        # Create a symlink in the order's items folder toward the global item file
        link = fs::Symlink(
            host=localhost,
            src=item_file.path,
            dst=f"{self._service._items_folder.path}/{self.name}.json",
            purged=self._purged,
            send_event=true,
            requires=[self.requires, self._service._items_folder, item_file],
            provides=self.provides,
        )
        self.resources += link
    end
end


implement ImportantCustomerService using service_file, parents
implement ServiceDocumentation using parents
implement ServiceItem using item_file, parents
