import openstack
import vyos::openstackext
import vyos
import ssh

"""
Deploy a Vyos router connected to two networks
"""


# user connection
provider = openstack::Provider(
    name="iaas_openstack",
    connection_url=std::get_env("OS_AUTH_URL"),
    username=std::get_env("OS_USERNAME"),
    password=std::get_env("OS_PASSWORD"),
    tenant=std::get_env("OS_PROJECT_NAME")
)

# user project
project = openstack::Project(
    name=provider.tenant,
    provider=provider,
    managed=false
)

# management network
mgmt_network = openstack::Network(
    provider=provider,
    project=project,
    name="mgmt-net",
)

# management subnet
mgmt_subnet = openstack::Subnet(
    network_address="10.0.0.0/24",
    dhcp=true,
    name="mgmt-sub",
    provider=provider,
    project=project,
    network=mgmt_network,
)

# interal network
internal_network = openstack::Network(
    provider=provider,
    project=project,
    name="interal",
)

# management subnet
internal_subnet = openstack::Subnet(
    network_address="10.20.5.0/24",
    dhcp=true,
    name="interal-sub",
    provider=provider,
    project=project,
    network=internal_network,
)

ssh_key = ssh::Key(name="my_key", public_key=std::source("/id_rsa.pub"))

flavor = openstack::find_flavor(provider, 1, 0.5)

# make the host, no ports here
fw = vyos::openstackext::OpenstackHost(
    provider=provider,
    project=project,
    key_pair=ssh_key,
    name="fw-to-router",
    os=vyos::vyos_12,
    flavor=flavor,
    install_agent=true,
    user="vyos",
    password ="vyos",
)

# attach security group
fw.vm.security_groups = default_sg
default_sg = openstack::SecurityGroup(
        name="default",
        description="Default security group",
        provider=provider,
        project=project,
        rules=[
            openstack::IPrule(ip_protocol="all", port=0, direction="egress", remote_prefix="0.0.0.0/0"),
            openstack::IPrule(ip_protocol="tcp", port=22, direction="ingress", remote_prefix="0.0.0.0/0"),
            openstack::IPrule(ip_protocol="icmp", port=0, direction="ingress", remote_prefix="0.0.0.0/0"),
        ],
)


#attach management port
fw_port1 = openstack::HostPort(
    provider=provider,
    vm=fw.vm,
    subnet=mgmt_subnet,
    name="{{fw.name}}_eth0",
    address=std::getfact(fw_port1, "ip_address"),
    project=project,
    port_index=1,
)

# wire up meta-data like ip
fw.vm.eth0_port = fw_port1
fw.ip = fw_port1.address


#attach secondary port
fw_port2 = openstack::HostPort(
    provider=provider,
    vm=fw.vm,
    subnet=internal_subnet,
    name="{{fw.name}}_eth1",
    address=std::getfact(fw_port2, "ip_address"),
    project=project,
    port_index=2,
    portsecurity=false, # needed for router ports that don't have a single mac/ip combination
)
# if port security is enabled, only the mac/ip combination as set by openstack is allowed


