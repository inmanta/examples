# import the Cisco module as an alias for easier access
import ciscoxr as c

# You can define the device information here for easier management
hostname = "router"      # Device hostname
mgmt_ip = "192.168.2.20" # Device management IP address
port = 21830             # Device NETCONF port
username = "admin"       # Device username
password = "admin"       # Device password

# Construct the router instance using the imported module name and feed it the information above
router = c::Device(
    name=hostname,
    mgmt_ip=mgmt_ip,
    port=port,
    username=username,
    password=password,
    auto_agent=true,
)


# Configure BGP with VRF
bgp = c::BGP(                                                                       # Instantiate BGP entity
    device=router,                                                                  # Link it to the defined router to device field
    instance = c::Instance(                                                         # Instantiate a routing instance
        instance_name = "default",                                                  # Specify a name for the instance
        instance_as = c::Instance_as(                                               # Instantiate an autonomous system number entity
            as_number = 0,                                                          # Specify AS number format, in this case the traditional 2-bytes
            four_byte_as = c::Four_byte_as(                                         # Instantiate Four_byte_as entity, this will contain your AS number
                as_number = 65000,                                                  # Specify the AS number
                default_vrf = c::Default_vrf(                                       # Instantiate a default VRF entity
                    global = c::Global(                                             # Instantiate Global routing entity
                        nsr = true,                                                 # Enable the NSR/non-stop routing support
                        router_id = "10.1.1.1",                                     # Specify the router ID
                        graceful_restart = true,                                    # Enable graceful restart
                        global_afs = c::Global_afs(                                 # Instantiate global address families
                            global_af_vpnv4_unicast = c::Global_af_vpnv4_unicast(   # Instantiate global vpnv4 unicast address family
                                enable = true,                                      # Enable it
                            )
                        )
                    ),
                    bgp_entity = c::Bgp_entity(                                         # Instantiate BGP entity
                        neighbor_groups = c::Neighbor_groups(                           # Instantiate neighbor groups
                            neighbor_group = c::Neighbor_group(                         # Instantiate neighbor group
                                neighbor_group_name = "NG_RR",                          # Specify a name for the neighbor group
                                update_source_interface = "Loopback0",                  # Specify the update source interface
                                neighbor_graceful_restart  = false,                     # Disable/Enable graceful restart
                                remote_as = c::Remote_as(                               # Instantiate remote AS entity
                                    as_yy = 65000,                                      # Set AS number in YY format (2-byte version)
                                    as_xx = 0,                                          # Set AS number in XX format (do not specify in case of using the 2-byte version)
                                ),
                                neighbor_group_afs = c::Neighbor_group_afs(                                 # Instantiate neighbor group address families
                                    neighbor_group_af_vpnv4_unicast = c::Neighbor_group_af_vpnv4_unicast(   # Instantiate unicast neighbor group vpnv4 address family
                                        activate = true,                                                    # Activate it
                                        next_hop_self = false,                                              # Disable the `next-hop self` advertisement
                                    )
                                )
                            )
                        ),
                        neighbors = c::Neighbors(                           # Instantiate Neighbors entity
                            neighbor = c::Neighbor(                         # Instantiate Neighbor entity
                                neighbor_address = "10.1.1.3",              # Specify the neighbor's address
                                neighbor_group_add_member = "NG_RR",        # Add it to the neighbor group
                                description = "uu.rr",                      # Specify a description
                            )
                        )
                    )
                ),
                vrfs = c::VRFS(                                             # Instantiate VRFs entity
                    vrf = c::VRF(                                           # Instantiate VRF entity
                        vrf_name = "OAM",                                   # Specify VRF name
                        vrf_global = c::VRF_GLOBAL(                         # Instantiate VRF global
                            route_distinguisher = c::Route_distinguisher(   # Instantiate route distinguisher/RD
                                type = "ipv4-address",                      # Specify the type
                                address = "10.10.10.10",                    # Specify the address
                                address_index = 11,                         # Specify address index
                            ),
                            vrf_global_afs = c::VRF_GLOBAL_AFS(                                                 # Instantiate VRF global address families
                                vrf_global_af_ipv4_unicast = c::VRF_GLOBAL_AF_IPV4_UNICAST(                     # Instantiate VRF global IPv4 address families
                                    enable = true,                                                              # Enable it
                                    connected_routes = true,                                                    # Redistribute connected routes
                                    vrf_global_af_ipv4_unicast_ibgp = c::VRF_GLOBAL_AF_IPV4_UNICAST_IBGP(       # Instantiate VRF global IPv4 unicast iBGP
                                        paths_value = 2,                                                        # Specify maximum-paths
                                        unequal_cost = false,                                                   # Disable/Enable unequal cost load sharing
                                        selective = false,                                                      # Allow multipaths only from marked neighbors
                                        order_by_igp_metric = false,                                            # Order candidate multipaths by IGP metric
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)


