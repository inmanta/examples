# import the Cisco module as an alias for easier access
import ciscoxr as c

# You can define the device information here for easier management
hostname = "router"      # Device hostname
mgmt_ip = "10.11.12.11"  # Device management IP address
port = 830               # Device NETCONF port
username = "admin"       # Device username
password = "admin"       # Device password

# Construct the router instance using the imported module name and feed it the information above
router = c::Device(
    name=hostname,
    mgmt_ip=mgmt_ip,
    port=port,
    username=username,
    password=password,
    auto_agent=true,
)

bgp = c::BGP(                       # Instantiate BGP entity
    device=router,                  # Link it to the defined router to device field
)

instance = c::Instance(             # Instantiate a routing instance
    instance_name = "default",      # Specify a name for the instance
    bgp = bgp,                      # Link the defined BGP entity to the bgp field
)

instance_as = c::Instance_as(       # Instantiate an autonomous system number entity
    instance = instance,            # Link it to the defined routing instance
    as_number = 0                   # Specify AS number format, in this case the traditional 2-bytes
)

four_byte_as = c::Four_byte_as(     # Instantiate Four_byte_as entity, this will contain your AS number
    instance_as = instance_as,      # Link it to the defined instance_as
    as_number = 65000,              # Specify the AS number
)

default_vrf = c::Default_vrf(       # Instantiate a default VRF entity
    four_byte_as = four_byte_as,    # Link the AS number entity to it
)

global = c::Global(                 # Instantiate Global routing entity
    default_vrf = default_vrf,      # Link the default VRF to it
    nsr = true,                     # Enable the NSR/non-stop routing support
    router_id = "10.1.1.1",         # Specify the router ID
    graceful_restart = true,        # Enable graceful restart
)

global_afs = c::Global_afs(         # Instantiate global address families
    global = global,                # Link the defined global routing entity to it
)

global_af_vpnv4_unicast = c::Global_af_vpnv4_unicast(   # Instantiate global vpnv4 unicast address family
    global_afs = global_afs,                            # Link the global address families to the global_afs field
    enable = true,                                      # Enable it
)

bgp_entity = c::Bgp_entity(                             # Instantiate BGP entity
    default_vrf = default_vrf,                          # Link the defined default_vrf to the default_vrf field
)

neighbor_groups = c::Neighbor_groups(                   # Instantiate neighbor groups
    bgp_entity = bgp_entity,                            # Link the defined BGP entity to the bgp_entity field
)

neighbor_group = c::Neighbor_group(                     # Instantiate neighbor group
    neighbor_groups = neighbor_groups,                  # Link the defined neighbor_groups
    neighbor_group_name = "NG_RR",                      # Specify a name for the neighbor group
    update_source_interface = "Loopback0",              # Specify the update source interface
    neighbor_graceful_restart  = false,                 # Disable/Enable graceful restart
)

remote_as = c::Remote_as(                               # Instantiate remote AS entity
    neighbor_group  = neighbor_group,                   # Link the defined neighbor_group
    as_xx = 0,                                          # Set AS number in XX format (do not specify in case of using the 2-byte version)
    as_yy = 65000,                                      # Set AS number in YY format (2-byte version)
)

neighbor_group_afs = c::Neighbor_group_afs(             # Instantiate neighbor group address families
    neighbor_group  = neighbor_group,                   # Link the defined neighbor group
)

neighbor_group_af_vpnv4_unicast = c::Neighbor_group_af_vpnv4_unicast(   # Instantiate unicast neighbor group vpnv4 address family
    neighbor_group_afs = neighbor_group_afs,                            # Link the defined neighbor group address families
    activate = true,                                                    # Activate it
    next_hop_self = false,                                              # Disable the `next-hop self` advertisement
)

neighbors = c::Neighbors(                               # Instantiate Neighbors entity
    bgp_entity = bgp_entity,                            # Link the defined BGP entity
)

neighbor = c::Neighbor(                                 # Instantiate Neighbor entity
    neighbors = neighbors,                              # Link the defined neighbors entity
    neighbor_address = "10.1.1.2",                      # Specify the neighbor's address
    neighbor_group_add_member = "NG_RR",                # Add it to the neighbor group
    description = "uu.rr",                              # Specify a description
)
