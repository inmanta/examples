"""
    Copyright 2023 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import nokia_srlinux
import nokia_srlinux::interface
import nokia_srlinux::interface::subinterface
import nokia_srlinux::interface::subinterface::ipv4
import nokia_srlinux::network_instance
import nokia_srlinux::network_instance::protocols
import nokia_srlinux::network_instance::protocols::ospf
import nokia_srlinux::network_instance::protocols::ospf::instance
import nokia_srlinux::network_instance::protocols::ospf::instance::area
import yang


entity Router:
    """
    Entity representing an srlinux router, with a name and an ip address.
    We assume that gnmi is already enabled on the router, and that is uses
    the default gnmi port.

    :attr name: The name of the router
    :attr address: The ip address to reach the router
    :attr username: A username to authenticate on the router
    :attr password: A password to authenticate on the router
    """
    string name
    std::ipv4_address address
    string username
    string password
end
Router.device [1] -- nokia_srlinux::GnmiDevice

index Router(name)
index Router(address)

implementation device for Router:
    self.device = nokia_srlinux::GnmiDevice(
        auto_agent=true,
        name=self.name,
        mgmt_ip=self.address,
        yang_credentials=yang::Credentials(username=self.username, password=self.password),
    )
end


entity Interface:
    """
    The name of the interface on the device we want to manage.
    This entity will add a single sub interface, with index 0 and assign
    it our desired ip address.

    We also automatically add the interfaces in the default management instance.

    :attr name: The name of the physical interface to configure
    :attr ipv4_address: The ipv4 address to set on this link
    """
    string name
    std::ipv4_interface ipv4_address

    bool purged = false
end
Interface.router [1] -- Router.interfaces [0:]

index Interface(router, name)

implementation intf_refinement for Interface:
    resource = nokia_srlinux::Resource(
        device=self.router.device,
        identifier=f"intf-{self.name}",
    )

    nokia_srlinux::Interface(
        device=self.router.device,
        name=self.name,
        admin_state="enable",
        subinterface=Subinterface(
            x_index=0,
            admin_state="enable",
            ipv4=Ipv4(
                admin_state="enable",
                address=Address(
                    ip_prefix=self.ipv4_address,
                ),
            ),
            resource=resource,
            purged=self.purged,
            comanaged=false,
        ),
        comanaged=true,
    )

    # Use the default vrf and add our interface to it
    nokia_srlinux::NetworkInstance(
        device=self.router.device,
        name="default",
        admin_state="enable",
        interface=nokia_srlinux::network_instance::Interface(
            name=f"{self.name}.0",
            resource=resource,
            purged=self.purged,
            comanaged=false,
        ),
        protocols=Protocols(
            # Make sure that ip forwarding is enabled in our vrf
            linux=Linux(
                export_routes=true,
                import_routes=true,
            )
        ),
        comanaged=true,
    )
end


entity Ospf:
    """
    Configure ospf in the default vrf, use the default instance and
    the default ospf instance, create an area using the given id and
    assign it all the attached interfaces.

    :attr area_id: The id of the area we want ton configure
    """
    std::ipv4_address area_id

    bool purged = false
end
Ospf.router [1] -- Router.ospf [0:1]
Ospf.interfaces [0:] -- Interface

index Ospf(router, area_id)


implementation ospf_refinement for Ospf:
    resource = nokia_srlinux::Resource(
        device=self.router.device,
        identifier=f"ospf-{self.area_id}"
    )

    nokia_srlinux::NetworkInstance(
        device=self.router.device,
        name="default",
        admin_state="enable",
        protocols=Protocols(
            ospf=nokia_srlinux::network_instance::protocols::Ospf(
                instance=Instance(
                    name="default",
                    admin_state="enable",
                    version="ospf-v2",
                    router_id=self.router.address,
                    area=Area(
                        area_id=self.area_id,
                        interface=[
                            nokia_srlinux::network_instance::protocols::ospf::instance::area::Interface(
                                interface_name=f"{interface.name}.0",
                                admin_state="enable",
                                interface_type="broadcast",
                            )
                            for interface in self.interfaces
                            if not interface.purged
                        ],
                        resource=resource,
                        purged=self.purged,
                        comanaged=false,
                    ),
                ),
            ),
        ),
        comanaged=true,
    )
end


implement Router using device
implement Interface using intf_refinement
implement Ospf using ospf_refinement
