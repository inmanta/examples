/**@
* Updates the topology.yml so that the lab environement
* uses the same version as the specified Python package of the OSS product
*/
def update_topology() {
    def version = convert_python_version_to_docker_tag()
    if (version != 'latest') {
        def yamlFile = readYaml file: "Networking/SR Linux/containerlab/topology.yml"
        yamlFile['topology']['nodes']['inmanta-server']['image'] = "ghcr.io/inmanta/orchestrator:${version}"
        writeYaml file:"Networking/SR Linux/containerlab/topology.yml",data: yamlFile, overwrite: true
        echo readFile("Networking/SR Linux/containerlab/topology.yml")
    }
}


def convert_python_version_to_docker_tag() {
    def version = env.version
    version = version.replaceAll("\\s","")
    if (version) {
        def matcher = version =~ /(\d{4})\.(\d+)(\.\d+)?(rc\d*)?(\.dev\d*)?/
        if (matcher.matches()) {
            def year = matcher.group(1)
            def minor = matcher.group(2)
            def patch = matcher.group(3) ?: ""
            def rc = matcher.group(4) ?: ""
            // Constructing the formatted version
            def formattedVersion = "${year}.${minor}${patch}"
            if (rc) {
                formattedVersion += "-rc"
            }
            return formattedVersion
        } else {
            error("Invalid version format: ${version}")
        }
    }
    return 'latest'
}

pipeline {
    agent any
    parameters {
        string(name: 'version', description: 'Run the quickstart against the specified version of the Python package of the OSS product.\nIf left empty it will run against the latest stable version.\nThe version can be of format 2023.1.1rc20230217144359, 2023.1.1rc, 2023.1.1 or 2022.4')
    }

    environment {
        PIP_INDEX_URL='https://artifacts.internal.inmanta.com/inmanta/dev'
    }

    triggers {
        cron(BRANCH_NAME == 'master' ? 'H H(2-5) * * *' : '')
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Build And Test') {
            stages {
                stage('Cleanup') {
                    steps {
                        sh '''
                            # Cleanup before starting
                            cd "Networking/SR Linux"
                            sudo clab destroy --cleanup -t containerlab/topology.yml || true
                            # Workaround for: https://github.com/srl-labs/containerlab/issues/1306
                            sudo docker network rm -f inmanta_mgmt
                            rm -f *.log
                            rm -f .inmanta
                        '''
                    }
                }
                stage('Build') {
                    options {
                        timeout(time: 1, unit: 'HOURS')
                    }
                    steps {
                        update_topology()
                        sh '''
                            cd "Networking/SR Linux"
                            # Ensure we have the latest version of the srlinux image
                            sudo docker pull ghcr.io/nokia/srlinux:latest
                            sudo clab deploy -t containerlab/topology.yml --reconfigure
                            # Get python version used to build the container
                            python_version=$(docker inspect --format='{{range .Config.Env}}{{println .}}{{end}}' clab-srlinux-inmanta-server | grep -P "^PYTHON_VERSION=" | sed 's/[^=]*=//' | cut -d . -f 1-2)

                            if [ -n "$version" ]; then
                                if [[ $version == *dev ]]; then
                                    constraint="~=${version::-3}.0.dev"
                                elif [[ $version == *rc ]]; then
                                    constraint="~=${version::-2}.0rc"
                                else
                                    # Use exact version
                                    constraint="==$version"
                                fi
                            else
                                # Leave constraint undefined if version is not defined
                                constraint=""
                            fi

                            # Create python environment
                            python${python_version} -m venv venv
                            source "venv/bin/activate"
                            pip install -U pip

                            # install inmanta-dev-dependencies[extension] rather than pytest-inmanta-extensions directly to
                            # help pip find matching candidates (see inmanta/infra-tickets#180)
                            pip install "inmanta${constraint}" inmanta-dev-dependencies[extension]
                            python -u ci/do_test_deployment_and_verify.py

                            # ci/do_test_deployment_and_verify.sh ${python_version} ${constraint}
                        '''
                    }
                }
            }
            post {
                always {
                    sh '''
                        cd "Networking/SR Linux"
                        sudo clab destroy --cleanup -t containerlab/topology.yml
                        # The files in the containerlab/pgdata/pgdata directory are not owned by Jenkins,
                        # because they are created by the user inside the container.
                        sudo rm -rf containerlab/pgdata/pgdata
                        # Workaround for: https://github.com/srl-labs/containerlab/issues/1306
                        sudo docker network rm -f inmanta_mgmt
                    '''
                    archiveArtifacts artifacts: 'Networking/SR Linux/*.log'
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
