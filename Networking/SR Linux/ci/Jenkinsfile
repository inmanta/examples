def update_topology() {
    def version = formatVersion()
    echo "-------"
    echo version
    if (version) {
        def yamlFile = readYaml file: "Networking/SR Linux/containerlab/topology.yml"
        yamlFile['topology']['nodes']['inmanta-server']['image'] = "ghcr.io/inmanta/orchestrator:${version}"
        writeYaml file:"Networking/SR Linux/containerlab/topology.yml",data: yamlFile, overwrite: true
        echo readFile("Networking/SR Linux/containerlab/topology.yml")
    }
}


def formatVersion() {
    def version = env.rc_version
    if (version) {
        echo version
        def matcher = version =~ /(\d{4})\.(\d+)\.(\d+)(rc)?(\d*)/
        if (matcher.matches()) {
            def year = matcher.group(1)
            echo year
            def major = matcher.group(2)
            echo major
            def minor = matcher.group(3)
            echo minor
            def rc = matcher.group(4)
            echo rc
            def formattedVersion = "${year}.${major}.${minor}"
            if (rc) {
                formattedVersion += "-${rc}"
            }
            return formattedVersion
        } else {
            error("Invalid version format: ${version}")
            return
        }
    }
    return 

}

pipeline {
    agent any
    
    parameters {
        string(name: 'rc_version', description: 'Run OSS quickstart against the RC with the given version. If left empty it will run against the stable version.\nThe version can be of format 2023.1.1rc20230217144359 or 2023.1.1rc')
    }

    environment {
        PIP_INDEX_URL='https://artifacts.internal.inmanta.com/inmanta/dev'
    }

    triggers {
        cron(BRANCH_NAME == 'master' ? 'H H(2-5) * * *' : '')
    }
    
    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Build And Test') {
            stages {
                stage('Cleanup') {
                    steps {
                        sh '''
                            # Cleanup before starting
                            cd "Networking/SR Linux"
                            sudo rm -rf clab-srlinux
                            rm -f *.log
                            sudo clab destroy -t containerlab/topology.yml
                            rm -f .inmanta
                        '''
                    }
                }
                stage('Build') {
                    options {
                        timeout(time: 1, unit: 'HOURS')
                    }
                    steps {
                        update_topology()
                        sh '''
                            cd "Networking/SR Linux"
                            # Ensure we have the latest version of the srlinux image
                            sudo docker pull ghcr.io/nokia/srlinux:latest
                            sudo clab deploy -t containerlab/topology.yml --reconfigure
                            ci/do_test_deployment_and_verify.sh ${rc_version}
                        '''
                    }
                }
            }
            post {
                always {
                    sh '''
                        cd "Networking/SR Linux"
                        sudo clab destroy -t containerlab/topology.yml
                        sudo rm -rf clab-srlinux
                    '''
                    archiveArtifacts artifacts: 'Networking/SR Linux/*.log'
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
