/**
* Set the repo URL in the project.yml, that references the private Python package repository, correctly based on the
* given iso version and token.
*
* @param isoProductVersion: The version of the inmanta-service-orchestrator Python package of the orchestrator we are running against.
* @param token: The token to connect to the private Python package repository for the Inmanta project.
*/
def update_project_yml(String isoProductVersion, String token) {
    def pythonPackageRepoUrl = ""
    if (isoProductVersion.endsWith("dev")) {
        pythonPackageRepoUrl = "https://artifacts.internal.inmanta.com/inmanta/dev"
    } else if (isoProductVersion.endsWith("rc")) {
        pythonPackageRepoUrl = "https://artifacts.internal.inmanta.com/inmanta/next"
    } else{
        def majorVersion = isoProductVersion.split('\\.')[0]
        pythonPackageRepoUrl = "https://packages.inmanta.com/${token}/inmanta-service-orchestrator-${majorVersion}-stable/python/simple/"
    }
    def fileName = "${env.WORKSPACE}/lsm-srlinux/project.yml"

    def yamlDct = readYaml file: fileName

    yamlDct.pip.index_url = pythonPackageRepoUrl

    writeYaml file: fileName, data: yamlDct, overwrite: true
}


/**
* Updates the topology.yml so that the lab environment
* uses the same version as the specified Python package of the ISO product.
*
* @param isoProductVersion: The version of the inmanta-service-orchestrator Python package of the orchestrator we are running against.
*/
def update_topology(String isoProductVersion) {
    def major
    if (isoProductVersion == "dev") {
        major = "latest"
    } else {
        try {
            // do not store Matcher object in variable!
            // see https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/#avoiding-notserializableexception
            major = (isoProductVersion =~ /(\d+).*/)[0][1]
        } catch (IndexOutOfBoundsException) {
            error("Invalid version specifier")
        }
    }
    def dockerImageUrl = convert_iso_version_to_docker_image_url(isoProductVersion)
    def topology_file = "${env.WORKSPACE}/lsm-srlinux/containerlab/topology.yml"
    def env_file = "${env.WORKSPACE}/lsm-srlinux/containerlab/resources/orchestrator.env"
    def yamlDct = readYaml file: topology_file
    yamlDct['topology']['nodes']['inmanta-server']['image'] = dockerImageUrl
    writeYaml file: topology_file, data: yamlDct, overwrite: true
    writeFile (
        file: env_file,
        text: "PIP_CONSTRAINT=https://docs.inmanta.com/inmanta-service-orchestrator-dev/${major}/reference/requirements.txt",
    )
}


/**
* Convert the version of the inmanta-service-orchestrator Python package to a URL that references a docker image.
*
* @param isoProductVersion: The version of the inmanta-service-orchestrator Python package of the orchestrator we are running against.
*/
def convert_iso_version_to_docker_image_url(String isoProductVersion) {
    def matcher = isoProductVersion =~ /(\d+)/
    // Is it a version number consisting of a single number
    if (matcher.matches()) {
        return "containers.inmanta.com/containers/service-orchestrator:${isoProductVersion}"
    }
    matcher = isoProductVersion =~ /(\d*)dev/
    // It's a development version
    if (matcher.matches()) {
        def dev_version_tag

        def specific_dev_version = matcher.group(1)
        if (specific_dev_version) {
            // Use this specific dev version
            dev_version_tag = "${specific_dev_version}-dev"
        } else {
            // Use latest dev tag
            dev_version_tag = "dev"
        }

        return "code.inmanta.com:4567/solutions/containers/service-orchestrator:${dev_version_tag}"
    }
    // Is it a three-dotted version number
    matcher = isoProductVersion =~ /(\d+)\.(\d+)\.(\d+)(rc)?(\d*)/
    if (matcher.matches()) {
        def major = matcher.group(1)
        def minor = matcher.group(2)
        def patch = matcher.group(3)
        def isRcVersion = matcher.group(4)
        def formattedVersion = "${major}.${minor}.${patch}"
        if (isRcVersion) {
            formattedVersion += "-rc"
        }
        return "containers.inmanta.com/containers/service-orchestrator:${formattedVersion}"
    } else {
        error("Invalid version format: ${isoProductVersion}")
    }
}


/**
* Returns the script that tears down the lab environment.
*
* @param strict: If false, allow the cleanup to fail, e.g. because the containers do not yet exist.
*/
def get_tear_down_script(boolean strict = true) {
   return """
       cd '${env.WORKSPACE}/lsm-srlinux'
       sudo clab destroy --cleanup -t containerlab/topology.yml ${strict ? '' : '|| true'}
       # The files in the containerlab/pgdata/pgdata directory are not owned by Jenkins,
       # because they are created by the user inside the container.
       sudo rm -rf containerlab/pgdata/pgdata
   """
}


pipeline {
    agent any
    parameters {
        string(
            name: 'version',
            defaultValue: 'dev',
            description:'''
Run the lsm quickstart against the specified version of ISO product.
The version can be of format 6.1.1, 6, 6dev, 6.5.0rc or dev to use \
the latest dev image.
            '''
        )
    }

    environment {
        PIP_INDEX_URL='https://artifacts.internal.inmanta.com/inmanta/dev'
    }

    triggers {
        parameterizedCron(BRANCH_NAME == 'master' ? "H H(2-5) * * * " : "")
    }

    options {
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    stages {
        stage('Cleanup') {
            steps {
                deleteDir()
                checkout scm
                withCredentials([
                    file(credentialsId: 'JENKINS_JWE', variable: 'ENTITLEMENTS_FILE'),
                    file(credentialsId: 'JENKINS_LICENSE', variable: 'LICENSE_KEY_FILE'),
                ]) {
                    sh '''
                        cd "${WORKSPACE}/lsm-srlinux/containerlab"
                        # The `clab destroy` command expects the com.inmanta.jwe and
                        # com.inmanta.license files to exist in disk.
                        mkdir -p resources
                        cp "${ENTITLEMENTS_FILE}" resources/com.inmanta.jwe
                        cp "${LICENSE_KEY_FILE}" resources/com.inmanta.license
                        # The inmanta container is running as a different user then Jenkins
                        chmod 444 resources/com.inmanta.jwe resources/com.inmanta.license
                    '''
                }
                script {
                    // Cleanup before starting
                    sh(script: get_tear_down_script(false))
                }
            }
        }
        stage('Build') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                script {
                    withCredentials([
                        // Credentials to access the inmanta-service-orchestrator-* repositories on Cloudsmith.
                        string(
                            credentialsId: "cloudsmith-token",
                            variable: "CLOUDSMITH_PKGS_TOKEN",
                        ),
                    ]) {
                        // update_topology validates whether the given version has a valid format
                        update_topology(env.version)
                        update_project_yml(env.version, env.CLOUDSMITH_PKGS_TOKEN)
                        sh '''
                            cd "${WORKSPACE}/lsm-srlinux"
                            # Ensure we have the latest version of the srlinux image
                            sudo docker pull ghcr.io/nokia/srlinux:latest

                            sudo clab deploy -t containerlab/topology.yml --reconfigure
                            # Get python version used to build the container
                            python_version=$(docker inspect --format='{{range .Config.Env}}{{println .}}{{end}}' clab-srlinux-inmanta-server | grep -P "^PYTHON_VERSION=" | sed 's/[^=]*=//' | cut -d . -f 1-2)

                            # Create python environment
                            python${python_version} -m venv venv
                            source "venv/bin/activate"
                            pip install -U pip


                            if [[ ${version} == dev ]]; then
                                constraint=""
                            elif [[ ${version} == *dev ]]; then
                                constraint="~=${version::-3}.0.dev"
                            elif [[ ${version} == *rc ]]; then
                                constraint="~=${version::-2}.0rc"
                            elif [[ ${version} = *.*.* ]]; then
                                # use exact version if fully specified, e.g. 6.0.0 or 6.5.0rc20231208092517
                                constraint="==${version}"
                            else
                                # allow unspecified digits to float, e.g. 6 -> ~=6.0
                                constraint="~=${version}.0"
                            fi
                            # install inmanta-dev-dependencies[extension] rather than pytest-inmanta-extensions directly to
                            # help pip find matching candidates (see inmanta/infra-tickets#180)
                            pip install "inmanta-service-orchestrator${constraint}" inmanta-dev-dependencies[extension]

                            python -u ci/do_test_deployment_and_verify.py
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            script{
                sh(script: get_tear_down_script())
            }
            deleteDir()
        }
    }
}

