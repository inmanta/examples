# import the Cisco and policy_map from Cisco services module as an alias for easier access
import ciscoxr as c
import ciscoxr_services::policy_map as pm

# You can define the device information here for easier management
hostname = "router"      # Device hostname
mgmt_ip = "192.168.2.20" # Device management IP address
port = 21830             # Device NETCONF port
username = "admin"       # Device username
password = "admin"       # Device password

# Construct the router instance using the imported module name and feed it the information above
router = c::Device(
    name=hostname,
    mgmt_ip=mgmt_ip,
    port=port,
    username=username,
    password=password,
    auto_agent=true,
)



bgp = c::BGP(                       # Instantiate BGP entity
    device=router,                  # Link it to the defined router to device field
)

instance = c::Instance(             # Instantiate a routing instance
    instance_name = "default",      # Specify a name for the instance
    bgp = bgp,                      # Link the defined BGP entity to the bgp field
)

instance_as = c::Instance_as(       # Instantiate an autonomous system number entity
    instance = instance,            # Link it to the defined routing instance
    as_number = 0                   # ???????????????????????????????????????????????????????????
)

four_byte_as = c::Four_byte_as(     # Instantiate Four_byte_as entity, this will contain your AS number
    instance_as = instance_as,      # Link it to the defined instance_as
    as_number = 65000,              # Specify the AS number
)

default_vrf = c::Default_vrf(       # Instantiate a default VRF entity
    four_byte_as = four_byte_as,    # Link the AS number entity to it
)

global = c::Global(                 # Instantiate Global routing entity
    default_vrf = default_vrf,      # Link the default VRF to it
    nsr = true,                     # Enable the NSR/non-stop routing support
    router_id = "10.1.1.1",         # Specify the router ID
    graceful_restart = true,        # Enable graceful restart
)

global_afs = c::Global_afs(         # Instantiate global address families
    global = global,                # Link the defined global routing entity to it
)

global_af_ipv4_multicast = c::Global_af_ipv4_multicast(
    global_afs = global_afs,
    enable = true,
)

global_af_vpnv4_unicast = c::Global_af_vpnv4_unicast(
    global_afs = global_afs,
    enable = true,
)

global_af_vpnv6_unicast = c::Global_af_vpnv6_unicast(
    global_afs = global_afs,
    enable = true,
)

global_af_ipv4rt_constraint = c::Global_af_ipv4rt_constraint(
    global_afs = global_afs,
    enable = true,
)

global_af_l2vpn_evpn = c::Global_af_l2vpn_evpn(
    global_afs = global_afs,
    enable = true,
)

bgp_entity = c::Bgp_entity(
    default_vrf = default_vrf,
)

neighbor_groups = c::Neighbor_groups(
    bgp_entity = bgp_entity,
)

neighbor_group = c::Neighbor_group(
    neighbor_groups = neighbor_groups,
    neighbor_group_name = "NG_RR",
    update_source_interface = "Loopback0",
    neighbor_graceful_restart  = false,
)

remote_as = c::Remote_as(
    neighbor_group  = neighbor_group,
    as_xx = 0,
    as_yy = 65000,
)

neighbor_group_afs = c::Neighbor_group_afs(
    neighbor_group  = neighbor_group,
)

neighbor_group_af_ipv4_multicast = c::Neighbor_group_af_ipv4_multicast(
    neighbor_group_afs = neighbor_group_afs,
    activate = true,
    next_hop_self = true,
)

neighbor_group_af_vpnv4_unicast = c::Neighbor_group_af_vpnv4_unicast(
    neighbor_group_afs = neighbor_group_afs,
    activate = true,
    next_hop_self = false,
)

neighbor_group_af_vpnv4_unicast_maximum_prefix = c::Neighbor_group_af_vpnv4_unicast_maximum_prefix(
    neighbor_group_af_vpnv4_unicast = neighbor_group_af_vpnv4_unicast,
    prefix_limit = 100000,
    warning_percentage = 75,
    restart_time = 3,
)

neighbor_group_af_vpnv6_unicast = c::Neighbor_group_af_vpnv6_unicast(
    neighbor_group_afs = neighbor_group_afs,
    activate = true,
    next_hop_self = false,
)

neighbor_group_af_vpnv6_unicast_maximum_prefix = c::Neighbor_group_af_vpnv6_unicast_maximum_prefix(
    neighbor_group_af_vpnv6_unicast = neighbor_group_af_vpnv6_unicast,
    prefix_limit = 100000,
    warning_percentage = 75,
    restart_time = 3,
)

neighbor_group_af_ipv4rt_constraint = c::Neighbor_group_af_ipv4rt_constraint(
    neighbor_group_afs = neighbor_group_afs,
    activate = true,
    next_hop_self = false,
)

neighbor_group_af_l2vpn_evpn = c::Neighbor_group_af_l2vpn_evpn(
    neighbor_group_afs = neighbor_group_afs,
    activate = true,
    next_hop_self = false,
)

neighbors = c::Neighbors(
    bgp_entity = bgp_entity,
)

neighbor = c::Neighbor(
    neighbors = neighbors,
    neighbor_address = "1.1.1.1",
    neighbor_group_add_member = "NG_RR",
    description = "uu.rr",
)


# Approach B - Coupling BGP configuration

