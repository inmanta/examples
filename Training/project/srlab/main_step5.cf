import srlinux
import srlinux::interface as srinterface
import srlinux::interface::subinterface as srsubinterface
import srlinux::interface::subinterface::ipv4 as sripv4
import srlinux::network_instance as srnetinstance
import srlinux::network_instance::protocols as srprotocols
import srlinux::network_instance::protocols::ospf as srospf
import srlinux::network_instance::protocols::ospf::instance as srospfinstance
import srlinux::network_instance::protocols::ospf::instance::area as srospfarea
import yang
import ip

"""
This model adds typedef and indexes to the model
"""

# typedef 
## router name typedef
typedef name_r as string matching /^R[0-9]+$/

# entities

entity Router:
    name_r name
    ip::ip mgmt_ip
    ip::ip loopback_ip
end

## Ospf peering between 2 routers
entity PeerNetwork: 
    ip::cidr network
    string left_port
    string right_port
end

## Ospf peer for one router
entity OspfPeerInterface:
    ip::cidr network
    string router_port
    int id = 1
end

# Relations

Router.host [1] -- srlinux::GnmiDevice
Router.router_net_instance [1] -- srlinux::NetworkInstance 
Router.router_ospf_area [1] -- srospfinstance::Area 

Router.ospf_peering [0:] -- PeerNetwork.routers [2]
PeerNetwork.left [1] -- Router
PeerNetwork.right [1] -- Router

Router.ospf_client_peering [0:] -- OspfPeerInterface.router [1]

# indexes

index Router(name)
index Router(mgmt_ip)
index Router(loopback_ip)
index PeerNetwork(network)
index OspfPeerInterface(network, id)
index OspfPeerInterface(router, router_port)

# implementations 

implementation router_config for Router:

    self.host = srlinux::GnmiDevice(
        auto_agent = true,
        name = self.name, 
        mgmt_ip = self.mgmt_ip,
        yang_credentials = yang::Credentials(
            username = "admin",
            password = "admin"
        )
    )

    # |network instance| #

    self.router_net_instance = srlinux::NetworkInstance(
        device = self.host,
        name = "default",
        router_id = self.loopback_ip
    )

    # |ospf instance| #
    
    router_protocols = srnetinstance::Protocols(
        parent_network_instance = self.router_net_instance,
        ospf = router_ospf
    )

    router_ospf_instance = srospf::Instance(
            parent_ospf = router_ospf,
            name = "1",
            router_id = self.loopback_ip,
            admin_state = "enable",
            version = "ospf-v2"
    )

    router_ospf = srprotocols::Ospf(
        parent_protocols = router_protocols,
        instance = router_ospf_instance
    )

    self.router_ospf_area = srospfinstance::Area(
        parent_instance = router_ospf_instance,
        area_id = "0.0.0.0",
    )

    # |loopback configuration| #

    router_lo = srlinux::Interface(
        device = self.host,
        name = "lo1", 
        subinterface = [router_lo_subint]
    )

    router_lo_subint = srinterface::Subinterface(
        parent_interface = router_lo,
        x_index = 0,
        ipv4 = router_lo_subint_address
    )

    router_lo_subint_address = srsubinterface::Ipv4(
        parent_subinterface = router_lo_subint,
        address = sripv4::Address(
            parent_ipv4 = router_lo_subint_address,
            ip_prefix = "{{self.loopback_ip}}/32" 
        )
    )

end

implement Router using router_config

implementation ospf_peers_config for PeerNetwork:
    self.routers += self.left
    self.routers += self.right
    
    peer1 = OspfPeerInterface(
        network = self.network,
        router_port = self.left_port,
        id = 1,
        router = self.left
    )

    peer2 = OspfPeerInterface(
        network = self.network,
        router_port = self.right_port,
        id = 2,
        router = self.right
    )

end

implement PeerNetwork using ospf_peers_config

implementation ospf_peer_config for OspfPeerInterface:
    
    router_ip = ip::ipindex(self.network, self.id)
    netmask = ip::ipnet(self.network, "prefixlen")
    
    router_eth = srlinux::Interface(
        device = self.router.host,
        name = self.router_port, 
        mtu = 9000
    )

    router_eth_subint = srinterface::Subinterface(
        parent_interface = router_eth,
        x_index = 0,
        ipv4 = router_eth_subint_address
    )

    router_eth_subint_address = srsubinterface::Ipv4(
        parent_subinterface = router_eth_subint,
        address = sripv4::Address(
            parent_ipv4 = router_eth_subint_address,
            ip_prefix = "{{router_ip}}/{{netmask}}"
        )
    )

     # set the network-instance this interface belongs to 
    router_net_instance_int = srnetinstance::Interface(
        parent_network_instance = self.router.router_net_instance, 
        name = "{{self.router_port}}.0" 
    )
        
    # |ospf interface| #
    router_ospf_int = srospfarea::Interface(
        parent_area = self.router.router_ospf_area, 
        interface_name = "{{self.router_port}}.0",
    )

end

implement OspfPeerInterface using ospf_peer_config

# Routers instantiations

r1 = Router(
    name = "R1",
    mgmt_ip = "10.0.0.5",
    loopback_ip = "10.1.1.1",
)

r2 = Router(
    name = "R2",
    mgmt_ip = "10.0.0.6",
    loopback_ip = "10.1.1.2",
)

r3 = Router(
    name = "R3",
    mgmt_ip = "10.0.0.7",
    loopback_ip = "10.1.1.3",
)

r4 = Router(
    name = "R4",
    mgmt_ip = "10.0.0.8",
    loopback_ip = "10.1.1.4",
)

# Ospf peering instantiations

## Routers peering

ospf12 = PeerNetwork(
    network = "10.1.0.0/30",
    left_port = "ethernet-1/1",
    right_port = "ethernet-1/1",
    left = r1,
    right = r2
)
ospf13 = PeerNetwork(
    network = "10.1.0.4/30",
    left_port = "ethernet-1/2",
    right_port = "ethernet-1/1",
    left = r1,
    right = r3
)
ospf14 = PeerNetwork(
    network = "10.1.0.12/30",
    left_port = "ethernet-1/3",
    right_port = "ethernet-1/1",
    left = r1,
    right = r4
)
ospf23 = PeerNetwork(
    network = "10.1.0.8/30",
    left_port = "ethernet-1/2",
    right_port = "ethernet-1/2",
    left = r2,
    right = r3
)
ospf24 = PeerNetwork(
    network = "10.1.0.16/30",
    left_port = "ethernet-1/3",
    right_port = "ethernet-1/2",
    left = r2,
    right = r4
)

ospf34 = PeerNetwork(
    network = "10.1.0.20/30",
    left_port = "ethernet-1/3",
    right_port = "ethernet-1/3",
    left = r3,
    right = r4
)

## Clients peering

ospf1c = OspfPeerInterface(
    network = "10.0.1.0/24",
    router_port = "ethernet-1/4",
    router = r1
)
ospf2c = OspfPeerInterface(
    network = "10.0.2.0/24",
    router_port = "ethernet-1/4",
    router = r2
)
ospf3c = OspfPeerInterface(
    network = "10.0.3.0/24",
    router_port = "ethernet-1/4",
    router = r3
)
ospf4c = OspfPeerInterface(
    network = "10.0.4.0/24",
    router_port = "ethernet-1/4",
    router = r4
)