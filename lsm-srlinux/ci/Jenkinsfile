/**
* Set the repo URL in the project.yml, that references the private Python package repository, correctly based on the 
* given iso version and token.
* 
* @param pythonVersion: The python version of the inmanta-service-orchestrator package of the orchestrator we are running against.
* @param token: The token to connect to the private Python package repository for the Inmanta project.
*/
def update_project_yml(String pythonVersion, String token) {
    def majorVersion = pythonVersion.split('\\.')[0]
    def fileName = "${env.WORKSPACE}/lsm-srlinux/project.yml"
    def yamlDct = readYaml file: fileName
    yamlDct['repo'][1]['url'] = "https://packages.inmanta.com/${token}/inmanta-service-orchestrator-${majorVersion}-stable/python/simple/"
    writeYaml file: fileName, data: yamlDct, overwrite: true
}


/**
* Updates the topology.yml so that the lab environement 
* uses the same version as the specified Python package of the ISO product
*
* @param pythonVersion: The python version of the inmanta-service-orchestrator package of the orchestrator we are running against.
*/
def update_topology(String pythonVersion) {
    def dockerTag = convert_python_version_to_docker_tag(pythonVersion)
    if (dockerTag != '') {
        def fileName = "${env.WORKSPACE}/lsm-srlinux/containerlab/topology.yml"
        def yamlDct = readYaml file: fileName
        yamlDct['topology']['nodes']['inmanta-server']['image'] = "containers.inmanta.com/containers/service-orchestrator:${dockerTag}"
        writeYaml file: fileName, data: yamlDct, overwrite: true
    }
}


/**
* Convert the Python version of the inmanta-service-orchestrator package to the docker tag of the associated docker image.
*/
def convert_python_version_to_docker_tag(String pythonVersion) {
    if (pythonVersion) {
        def matcher = pythonVersion =~ /(\d+)/
        // Is it a version number consisting of a single number
        if (matcher.matches()) {
            return pythonVersion
        }
        // Is it a three-dotted version number
        matcher = pythonVersion =~ /(\d+)\.(\d+)\.(\d+)(rc)?(\d*)/
        if (matcher.matches()) {
            def major = matcher.group(1)
            def minor = matcher.group(2)
            def patch = matcher.group(3)
            def rc = matcher.group(4)
            def formattedVersion = "${major}.${minor}.${patch}"
            if (rc) {
                formattedVersion += "-${rc}"
            }
            return formattedVersion
        } else {
            error("Invalid version format: ${pythonVersion}")
        }
    }
    return ''
}


/**
* Returns the script that tears down the lab environment.
*/
def get_tear_down_script() {
   return '''
       cd "${WORKSPACE}/lsm-srlinux"
       sudo clab destroy --cleanup -t containerlab/topology.yml
       # Workaround for: https://github.com/srl-labs/containerlab/issues/1306
       sudo docker network rm -f inmanta_mgmt
   ''' 
}


pipeline {
    agent any
    
    parameters {
        string(name: 'version', defaultValue: '6', description: 'Run the lsm quickstart against the specified version of the Python package of the ISO product.\nIf left empty it will run against iso6.\nThe version can be of format 6.1.1rc20230217144359, 6.1.1rc, 6.1.1 or 6')
    }

    triggers {
        cron(BRANCH_NAME == "master" ? "H H(2-5) * * *": "")
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Build And Test') {

            environment {
                PIP_INDEX_URL='https://artifacts.internal.inmanta.com/inmanta/dev'
            }

            stages {
                stage('Cleanup') {
                    steps {
                        withCredentials([
                            file(credentialsId: 'JENKINS_JWE', variable: 'ENTITLEMENTS_FILE'),
                            file(credentialsId: 'JENKINS_LICENSE', variable: 'LICENSE_KEY_FILE'),
                        ]) {
                            sh '''
                                cd "${WORKSPACE}/lsm-srlinux/containerlab"
                                mkdir resources
                                cp "${ENTITLEMENTS_FILE}" resources/com.inmanta.jwe
                                cp "${LICENSE_KEY_FILE}" resources/com.inmanta.license
                                # The inmanta container is running as a different user then Jenkins
                                chmod 444 resources/com.inmanta.jwe resources/com.inmanta.license
                            '''
                        }
                        script {
                            // Cleanup before starting
                            sh(script: get_tear_down_script())
                        }
                    }
                }
                stage('Build') {
                    options {
                        timeout(time: 1, unit: 'HOURS')
                    }
                    steps {
                        script {
                            withCredentials([
                                // Credentials to access the containers repository on Cloudsmith.
                                usernamePassword(
                                    credentialsId: "cloudsmith-docker-token",
                                    usernameVariable: "CLOUDSMITH_DOCKER_USERNAME",
                                    passwordVariable: "CLOUDSMITH_DOCKER_TOKEN"
                                ),
                                // Credentials to access the inmanta-service-orchestrator-* repositories on Cloudsmith.
                                string(
                                    credentialsId: "cloudsmith-token",
                                    variable: "CLOUDSMITH_PKGS_TOKEN",
                                ),
                            ]) {

                                update_topology(env.version)
                                update_project_yml(env.version, env.CLOUDSMITH_PKGS_TOKEN)
                                sh '''
                                    cd "${WORKSPACE}/lsm-srlinux"
                                    echo "${CLOUDSMITH_DOCKER_TOKEN}" | sudo docker login -u "${CLOUDSMITH_DOCKER_USERNAME}" --password-stdin containers.inmanta.com
                                    # Ensure we have the latest version of the srlinux image
                                    sudo docker pull ghcr.io/nokia/srlinux:latest

                                    # Create python environment
                                    python3 -m venv venv
                                    source "venv/bin/activate"
                                    pip install -U pip
                                    if [ -n "${version}" ]; then
                                        pip install --pre pytest-inmanta-extensions "inmanta-service-orchestrator==${version}"
                                    else
                                        pip install pytest-inmanta-extensions inmanta-service-orchestrator
                                    fi

                                    sudo clab deploy -t containerlab/topology.yml --reconfigure
                                    python ci/do_test_deployment_and_verify.py
                                '''
                            }
                        }
                    }
                }
            }
            post {
                always {
                    script{
                        sh(script: get_tear_down_script())
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}

